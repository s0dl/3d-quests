generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Map {
  id          String            @id @default(uuid())
  name        String            @default("WorldMap")
  description String            @default("The world map of your campaign")
  link        String
  campaignId  String
  campaign    Campaign          @relation(fields: [campaignId], references: [id])
}

model Campaign {
  id          String            @id @default(uuid())
  name        String
  description String?
  gmId        Int
  gm          User              @relation(fields: [gmId], references: [id])
  members     CampaignMember[]
  maps        Map[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model CampaignMember {
  id          String    @id @default(uuid())
  campaignId  String
  userId      Int
  role        Role      @default(PLAYER)
  joinedAt    DateTime  @default(now())

  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([campaignId, userId])
}


enum Role {
  GM
  PLAYER
}

model User {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  email         String    @unique
  name          String?
  emailVerified Boolean   @default(false)
  image         String?
  updatedAt     DateTime  @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]
  campaigns     Campaign[]
  memberships   CampaignMember[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                Int
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
